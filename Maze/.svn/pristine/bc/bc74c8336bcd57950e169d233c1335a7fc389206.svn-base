package falstad;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Font;
import java.awt.FontMetrics;
import java.awt.Graphics;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import javax.swing.*;

public class MazeView extends DefaultViewer {

	Maze maze ; // need to know the maze model to check the state 
	// and to provide progress information in the generating state
	JFrame frame;
	
	public MazeView(Maze m) {
		super() ;
		maze = m;
	}

	@Override
	public void redraw(Graphics gc, int state, int px, int py, int view_dx,
			int view_dy, int walk_step, int view_offset, RangeSet rset, int ang) {
		//dbg("redraw") ;
		switch (state) {
		case Constants.STATE_TITLE:
			redrawTitle(gc);
			break;
		case Constants.STATE_GENERATING:
			redrawGenerating(gc);
			break;
		case Constants.STATE_PLAY:
			// skip this one
			break;
		case Constants.STATE_FINISH:
			redrawFinish(gc);
			break;
		}
	}
	
	private void dbg(String str) {
		System.out.println("MazeView:" + str);
	}
	
	// 
	
	/**
	 * Helper method for redraw to draw the title screen, screen is hardcoded
	 * @param  gc graphics is the off screen image
	 */
	void redrawTitle(Graphics gc) {
        //Create and set up the window.
		frame = new JFrame("Maze");
        JLabel label = new JLabel("Welcome to the Maze. Choose:");
        label.setFont(new Font("Times New Roman", 1, 20));
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

        //Create and set up the content pane.
        JComponent newContentPane = new JPanel(new BorderLayout());
        newContentPane.add(label, BorderLayout.PAGE_START);
        JComponent newContentPane2 = new JPanel(new BorderLayout());
        JComponent newContentPane3 = new JPanel(new BorderLayout());
        ////////// Combo Boxes ///////////////////
        ComboBox drivers = new ComboBox("drivers");
        ComboBox algs = new ComboBox("algorithms");
        ComboBox levels = new ComboBox("levels");
        newContentPane2.add(algs, BorderLayout.WEST);
        newContentPane2.add(drivers, BorderLayout.CENTER);
        newContentPane2.add(levels, BorderLayout.EAST);
        // Adds it to the first panel in the center
        newContentPane.add(newContentPane2, BorderLayout.CENTER);
        
        JButton button = new JButton("GO!");
        newContentPane3.add(button);
        newContentPane.add(newContentPane3,  BorderLayout.PAGE_END);

        newContentPane.setOpaque(true); //content panes must be opaque
        ///////////////// GUI Initializer ///////////////////
        frame.setContentPane(newContentPane);
        frame.pack();
        frame.setVisible(true);
        
        button.addActionListener(new ActionListener(){
        	public void actionPerformed(ActionEvent evt){
        		frame.setVisible(false);
        		String driver = drivers.getInput();
        		System.out.println(driver);
        		String algorithm = algs.getInput();
        		System.out.println(algorithm);
        		int level = Integer.parseInt(levels.getInput());
        		maze = new Maze(algorithm, driver, level);
        		maze.build(level);
        	}
        });

	}
	/**
	 * Helper method for redraw to draw final screen, screen is hard coded
	 * @param gc graphics is the off screen image
	 */
	void redrawFinish(Graphics gc) {
		gc.setColor(Color.blue);
		gc.fillRect(0, 0, Constants.VIEW_WIDTH, Constants.VIEW_HEIGHT);
		gc.setFont(largeBannerFont);
		FontMetrics fm = gc.getFontMetrics();
		gc.setColor(Color.yellow);
		if(((Wizard) maze.robotDriver).getEnergyConsumption() != 0){
			centerString(gc, fm, "You won!", 100);
			gc.setColor(Color.orange);
			gc.setFont(smallBannerFont);
			fm = gc.getFontMetrics();
			centerString(gc, fm, "Congratulations!", 160);
			gc.setColor(Color.white);
			centerString(gc, fm, "Hit any key to restart", 300);
			
			centerString(gc, fm, "Battery left =" +((Wizard) maze.robotDriver).getEnergyConsumption(), 210) ;
			centerString(gc, fm, "Path Length =" + ((Wizard) maze.robotDriver).getPathLength(), 245);
		}
		else {
			centerString(gc, fm, "You Lost!", 100);
			gc.setColor(Color.orange);
			gc.setFont(smallBannerFont);
			fm = gc.getFontMetrics();
			centerString(gc, fm, "Sorry, you ran out of battery...", 160);
			gc.setColor(Color.white);
			centerString(gc, fm, "To try again: hit any key to restart", 300);
			centerString(gc, fm, "Path Length =" + ((Wizard) maze.robotDriver).getPathLength(), 245);
		}
	}

	/**
	 * Helper method for redraw to draw screen during phase of maze generation, screen is hard coded
	 * only attribute percentdone is dynamic
	 * @param gc graphics is the off screen image
	 */
	void redrawGenerating(Graphics gc) {
		gc.setColor(Color.yellow);
		gc.fillRect(0, 0, Constants.VIEW_WIDTH, Constants.VIEW_HEIGHT);
		gc.setFont(largeBannerFont);
		FontMetrics fm = gc.getFontMetrics();
		gc.setColor(Color.red);
		centerString(gc, fm, "Building maze", 150);
		gc.setFont(smallBannerFont);
		fm = gc.getFontMetrics();
		gc.setColor(Color.black);
		centerString(gc, fm, maze.getPercentDone()+"% completed", 200);
		centerString(gc, fm, "Hit escape to stop", 300);
	}
	
	private void centerString(Graphics g, FontMetrics fm, String str, int ypos) {
		g.drawString(str, (Constants.VIEW_WIDTH-fm.stringWidth(str))/2, ypos);
	}

	Font largeBannerFont = new Font("TimesRoman", Font.BOLD, 48);
	Font smallBannerFont = new Font("TimesRoman", Font.BOLD, 16);

}
