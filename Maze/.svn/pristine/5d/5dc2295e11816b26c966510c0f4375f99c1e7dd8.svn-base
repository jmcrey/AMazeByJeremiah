package falstad;

public class BasicRobot implements Robot {
	//Basic Parts
	public int battery;
	public boolean senFront;
	public boolean senLeft;
	public boolean senRight;
	public boolean senBack;
	public boolean moving;
	
	//Positions
	public int[] position;
	public Maze maze;
	public int degree;
	
	//Costs
	public final int rotateCost = 3;
	public final int senseCost = 1;
	public final int moveCost = 5;
	
	public BasicRobot(Maze currMaze){
		//Basic Parts initialize
		battery = 2500;
		senFront = true;
		senLeft = true;
		senRight = true;
		senBack = true;
		moving = true;
		
		//Positions initialized and starting point
		position = new int[2];
		position[0] = maze.px;
		position[1] = maze.py;
		int[] direction = {maze.dx, maze.dy};
		if(direction[0] == 1 && direction[1] == 0)
			degree = 0;
		else if(direction[0] == 0 && direction[0] == 1)
			degree = 90;
		else if(direction[0] == 0 && direction[0] == -1)
			degree = 270;
		else
			degree = 180;
		//Maze done
		maze = currMaze;		
	}

	@Override
	public void rotate(Turn turn) throws Exception {
		// TODO Auto-generated method stub
		if(battery < rotateCost){
			moving = false;
			return;
		}
		
		if(turn == Turn.LEFT){
			degree = 270;
			maze.rotate(-1);
		}
		else if(turn == Turn.RIGHT)
			maze.rotate(1);
		else if(turn == Turn.AROUND)
			maze.rotate(2);
		else
			throw new Exception();
		
		if(turn == Turn.LEFT)
			degree = (degree + -90) % 360;
		else if(turn == Turn.RIGHT)
			degree = (degree + 90) % 360;
		else
			degree = (degree + 180) % 360;
		
		battery -= rotateCost;
		

	}

	@Override
	public void move(int distance) throws Exception {
		// TODO Auto-generated method stub
		while (distance > 0){
			if (battery < moveCost){
				moving = false;
				break;
			}
			
			int[] pos = getCurrentPosition();
			if(maze.mazecells.hasNoWallOnTop(pos[0], pos[1])){
				maze.walk(1);
				maze.notifyViewerRedraw();
				battery -= moveCost;
			}
			else
				throw new Exception();
			distance--;
		}		

	}

	@Override
	public int[] getCurrentPosition() throws Exception {
		// TODO Auto-generated method stub
		int[] current = {maze.px, maze.py};
		return current;
	}

	@Override
	public void setMaze(Maze maze) {
		// TODO Auto-generated method stub
		if( maze != null)
			this.maze = maze;

	}

	@Override
	public boolean isAtGoal() {
		// TODO Auto-generated method stub
		int[] current = {maze.px, maze.py};
		return current[0] >= maze.mazeh || current[0] >= maze.mazew ||
				current[1] < 0 || current[0] < 0;
	}

	@Override
	public boolean canSeeGoal(Direction direction) throws UnsupportedOperationException {
		// TODO Auto-generated method stub
		if(battery < senseCost){
			moving = false;
			return false;
		}
		if(this.hasDistanceSensor(direction) == false)
			return false;
		return this.distanceToObstacle(direction) > this.maze.mazeh;
		
	}

	@Override
	public boolean isInsideRoom() throws UnsupportedOperationException {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public boolean hasRoomSensor() {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public int[] getCurrentDirection() {
		// TODO Auto-generated method stub
		int[] dir = new int[2];
		
		if(degree == 0){
			dir[0] = 1;
			dir[1] = 0;
		}
		else if(degree == 90){
			dir[0] = 0;
			dir[1] = 1;
		}
		else if(degree == 180){
			dir[0] = -1;
			dir[1] = 0;
		}
		else {
			dir[0] = 0;
			dir[1] = -1;
		}
		return dir;
	}

	@Override
	public float getBatteryLevel() {
		// TODO Auto-generated method stub
		return battery;
	}

	@Override
	public void setBatteryLevel(float level) {
		// TODO Auto-generated method stub
		this.battery = (int) level;
	}

	@Override
	public float getEnergyForFullRotation() {
		// TODO Auto-generated method stub
		return rotateCost *  4;
	}

	@Override
	public float getEnergyForStepForward() {
		// TODO Auto-generated method stub
		return moveCost;
	}

	@Override
	public boolean hasStopped() {
		// TODO Auto-generated method stub
		return !moving;
	}

	@Override
	public int distanceToObstacle(Direction direction) throws UnsupportedOperationException {
		// TODO Auto-generated method stub
		int dx = maze.dx;
	    int dy = maze.dy;
	    int px = maze.px;
	    int py = maze.py;
	    int distToOb = 0;     
	    
	    
	    if (direction == Direction.BACKWARD) {
	    	dx = -dx;
	    	dy = -dy;
	    }   
	    
	    else if(direction == Direction.RIGHT){

	    	if (dy == 0 && dx == 1){
	    		dx = 0;
	    		dy = -1;
	    	}
	    	else if (dy == 0 && dx == 0){
	    		dx = 0;
	    		dy = 1;
	    	}
	    	else if (dy == 0 && dx == -1){
	    		dx = 0;
	    		dy = 1;
	    	}
	    	else if (dy == 1 && dx == 0){
	    		dx = 1;
	    		dy = 0;
	    	}
	    	else if (dy == 1 && dx == 1){
	    		dx = 1;
	    		dy = 0;
	    	}
	    	else if (dy == 1 && dx == -1){
	    		dx = 1;
	    		dy = 0;
	    	}
	    	else{
	    		dx = -1;
	    		dy = 0;
	    	}                      
	    }                     
	    
	    else if(direction == Direction.LEFT){

	    	if (dy == 0 && dx == 1){
	    		dx = 0;
	    		dy = 1;
	    	}
	    	else if (dy == 0 && dx == 0){
	    		dx = 0;
	    		dy = -1;
	    	}
	    	else if (dy == 0 && dx == -1){
	    		dx = 0;
	    		dy = -1;
	    	}
	    	else if (dy == 1 && dx == 0){
	    		dx = -1;
	    		dy = 0;
	    	}
	    	else if (dy == 1 && dx == 1){
	    		dx = -1;
	    		dy = 0;
	    	}
	    	else if (dy == 1 && dx == -1){
	    		dx = -1;
	    		dy = 0;
	    	}
	    	else{
	    		dx = 1;
	    		dy = 0;
	    	}
	    }
	    switch(dx){
	    case 1:
	    	while(maze.mazecells.hasNoWallOnRight(px, py)){
		    	//while the move is valid, run through and increment distance
		    	distToOb++;
		    	
		    	px += dx;
		    	py += dy;
		           
		    	if(px < 0 || py < 0|| px >= maze.mazew || py >= maze.mazeh){
		    		return Integer.MAX_VALUE;
		    	}
		    }
		   
		    return distToOb;
	    case -1:
	    	while(maze.mazecells.hasNoWallOnLeft(px, py)){
		    	//while the move is valid, run through and increment distance
		    	distToOb++;
		    	
		    	px += dx;
		    	py += dy;
		           
		    	if(px < 0 || py < 0|| px >= maze.mazew || py >= maze.mazeh){
		    		return Integer.MAX_VALUE;
		    	}
		    }
		   
		    return distToOb;
	    }
		
	}

	@Override
	public boolean hasDistanceSensor(Direction direction) {
		// TODO Auto-generated method stub
		if(direction == Direction.RIGHT)
			return this.senRight;
		else if(direction == Direction.LEFT)
			return this.senLeft;
		else if(direction == Direction.FORWARD)
			return this.senFront;
		else if(direction == Direction.BACKWARD)
			return this.senBack;
		else
			return false;
	}

}
