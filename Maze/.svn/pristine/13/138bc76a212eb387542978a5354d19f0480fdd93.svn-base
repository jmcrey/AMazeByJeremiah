package falstad;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Font;
import java.awt.FontMetrics;
import java.awt.Graphics;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import javax.swing.*;

public class MazeView extends DefaultViewer {

	Maze maze ; // need to know the maze model to check the state 
	// and to provide progress information in the generating state
	
	// Frames and components to reuse
	JFrame frame ;
	JComponent newContentPane ;
	JButton button ;
	
	// Combo Box declarations
	ComboBox drivers ;
	ComboBox algs;
	ComboBox levels;
	
	// Defaults for driver, algs, and difficulty
	String driver = "Manual Driver";
	String algorithm = "Standard";
	int level = 0;
	
	GraphicsWrapper gw;
	
	public MazeView(Maze m) {
		super() ;
		maze = m;
		
	}

	@Override
	public void redraw(Graphics gc, int state, int px, int py, int view_dx,
			int view_dy, int walk_step, int view_offset, RangeSet rset, int ang) {
		//dbg("redraw") ;
		gw = new GraphicsWrapper(this.maze);
		switch (state) {
		case Constants.STATE_TITLE:
			redrawTitle(gc);
			break;
		case Constants.STATE_GENERATING:
			redrawGenerating(gc);
			break;
		case Constants.STATE_PLAY:
			// skip this one
			break;
		case Constants.STATE_FINISH:
			redrawFinish(gc);
			break;
		}
	}
	
	private void dbg(String str) {
		System.out.println("MazeView:" + str);
	}
	
	// 
	
	/**
	 * Helper method for redraw to draw the title screen, screen is hardcoded
	 * @param  gc graphics is the off screen image
	 */
	void redrawTitle(Graphics gc) {
		gw.redrawViewTitle(maze.panel.getBufferGraphics(), maze);
		/**
		gc.setColor(Color.white);
		gc.fillRect(0, 0, Constants.VIEW_WIDTH, Constants.VIEW_HEIGHT);
		gc.setFont(largeBannerFont);
		FontMetrics fm = gc.getFontMetrics();
		gc.setColor(Color.red);
		centerString(gc, fm, "MAZE", 100);
		gc.setColor(Color.blue);
		gc.setFont(smallBannerFont);
		fm = gc.getFontMetrics();
		centerString(gc, fm, "Please select from the box above.", 160);
		centerString(gc, fm, "Choose an algorithm, difficulty level and driver.", 190);
		centerString(gc, fm, "Some solve the maze automatically", 220);
		gc.setColor(Color.red);
		gc.setFont(midBannerFont);
		centerString(gc, fm, "CLICK AN ARROW KEY TO START DRIVER", 300);
		frame = maze.panel.frame;
		newContentPane = maze.panel.newContentPane;
		button = maze.panel.button;
		
		drivers = maze.panel.drivers;
		algs = maze.panel.algs;
		levels = maze.panel.levels;
        ///////////////// GUI Initializer ///////////////////
        frame.setVisible(true);
        
        button.addActionListener(new ActionListener(){
        	public void actionPerformed(ActionEvent evt){
        		frame.dispose();
        		if(drivers.getInput() != null)
        			driver = drivers.getInput();
        		System.out.println(driver);
        		if(algs.getInput() != null)
        			algorithm = algs.getInput();
        		System.out.println(algorithm);
        		if(levels.getInput() != null)
        			level = Integer.parseInt(levels.getInput());
        		maze.reset(algorithm, driver, level);
        		maze.build(level);
        		maze.myApp.repaint();
        	}
        });
        
	**/
	}
	/**
	 * Helper method for redraw to draw final screen, screen is hard coded
	 * @param gc graphics is the off screen image
	 */
	void redrawFinish(Graphics gc) {
		gw.redrawViewFinish(maze.panel.getBufferGraphics(), maze);
		/**
		gc.setColor(Color.blue);
		gc.fillRect(0, 0, Constants.VIEW_WIDTH, Constants.VIEW_HEIGHT);
		gc.setFont(largeBannerFont);
		FontMetrics fm = gc.getFontMetrics();
		gc.setColor(Color.yellow);
		if(maze.driver.equals("Wizard")){
			if(((Wizard) maze.robotDriver).getEnergyConsumption() != 0){
				centerString(gc, fm, "You won!", 100);
				gc.setColor(Color.orange);
				gc.setFont(smallBannerFont);
				fm = gc.getFontMetrics();
				centerString(gc, fm, "Congratulations!", 160);
				gc.setColor(Color.white);
				centerString(gc, fm, "Hit any key to restart", 300);
				
				centerString(gc, fm, "Battery left =" +((Wizard) maze.robotDriver).getEnergyConsumption(), 210) ;
				centerString(gc, fm, "Path Length =" + ((Wizard) maze.robotDriver).getPathLength(), 245);
			}
			else {
				centerString(gc, fm, "You Lost!", 100);
				gc.setColor(Color.orange);
				gc.setFont(smallBannerFont);
				fm = gc.getFontMetrics();
				centerString(gc, fm, "Sorry, you ran out of battery...", 160);
				gc.setColor(Color.white);
				centerString(gc, fm, "To try again: hit any key to restart", 300);
				centerString(gc, fm, "Path Length =" + ((Wizard) maze.robotDriver).getPathLength(), 245);
			}	
		}
		if(maze.driver.equals("Wall Follower")){
			if(((WallFollower) maze.robotDriver).getEnergyConsumption() != 0){
				centerString(gc, fm, "You won!", 100);
				gc.setColor(Color.orange);
				gc.setFont(smallBannerFont);
				fm = gc.getFontMetrics();
				centerString(gc, fm, "Congratulations!", 160);
				gc.setColor(Color.white);
				centerString(gc, fm, "Hit any key to restart", 300);
				
				centerString(gc, fm, "Battery left =" +((WallFollower) maze.robotDriver).getEnergyConsumption(), 210) ;
				centerString(gc, fm, "Path Length =" + ((WallFollower) maze.robotDriver).getPathLength(), 245);
			}
			else {
				centerString(gc, fm, "You Lost!", 100);
				gc.setColor(Color.orange);
				gc.setFont(smallBannerFont);
				fm = gc.getFontMetrics();
				centerString(gc, fm, "Sorry, you ran out of battery...", 160);
				gc.setColor(Color.white);
				centerString(gc, fm, "To try again: hit any key to restart", 300);
				centerString(gc, fm, "Path Length =" + ((WallFollower) maze.robotDriver).getPathLength(), 245);
			}	
		}
		
		if(maze.driver.equals("Manual Driver")){
			if(((ManualDriver) maze.robotDriver).getEnergyConsumption() != 0){
				centerString(gc, fm, "You won!", 100);
				gc.setColor(Color.orange);
				gc.setFont(smallBannerFont);
				fm = gc.getFontMetrics();
				centerString(gc, fm, "Congratulations!", 160);
				gc.setColor(Color.white);
				centerString(gc, fm, "Hit any key to restart", 300);
				
				centerString(gc, fm, "Battery left =" +((ManualDriver) maze.robotDriver).getEnergyConsumption(), 210) ;
				centerString(gc, fm, "Path Length =" + ((ManualDriver) maze.robotDriver).getPathLength(), 245);
			}
			else {
				centerString(gc, fm, "You Lost!", 100);
				gc.setColor(Color.orange);
				gc.setFont(smallBannerFont);
				fm = gc.getFontMetrics();
				centerString(gc, fm, "Sorry, you ran out of battery...", 160);
				gc.setColor(Color.white);
				centerString(gc, fm, "To try again: hit any key to restart", 300);
				centerString(gc, fm, "Path Length =" + ((ManualDriver) maze.robotDriver).getPathLength(), 245);
			}	
		}
		
		if(maze.driver.equals("Curious Mouse")){
			if(((CuriousMouse) maze.robotDriver).getEnergyConsumption() != 0){
				centerString(gc, fm, "You won!", 100);
				gc.setColor(Color.orange);
				gc.setFont(smallBannerFont);
				fm = gc.getFontMetrics();
				centerString(gc, fm, "Congratulations!", 160);
				gc.setColor(Color.white);
				centerString(gc, fm, "Hit any key to restart", 300);
				
				centerString(gc, fm, "Battery left =" +((CuriousMouse) maze.robotDriver).getEnergyConsumption(), 210) ;
				centerString(gc, fm, "Path Length =" + ((CuriousMouse) maze.robotDriver).getPathLength(), 245);
			}
			else {
				centerString(gc, fm, "You Lost!", 100);
				gc.setColor(Color.orange);
				gc.setFont(smallBannerFont);
				fm = gc.getFontMetrics();
				centerString(gc, fm, "Sorry, you ran out of battery...", 160);
				gc.setColor(Color.white);
				centerString(gc, fm, "To try again: hit any key to restart", 300);
				centerString(gc, fm, "Path Length =" + ((CuriousMouse) maze.robotDriver).getPathLength(), 245);
			}	
		}
		**/
	}

	/**
	 * Helper method for redraw to draw screen during phase of maze generation, screen is hard coded
	 * only attribute percentdone is dynamic
	 * @param gc graphics is the off screen image
	 */
	void redrawGenerating(Graphics gc) {
		gc.setColor(Color.yellow);
		gc.fillRect(0, 0, Constants.VIEW_WIDTH, Constants.VIEW_HEIGHT);
		gc.setFont(largeBannerFont);
		FontMetrics fm = gc.getFontMetrics();
		gc.setColor(Color.red);
		centerString(gc, fm, "Building maze", 150);
		gc.setFont(smallBannerFont);
		fm = gc.getFontMetrics();
		gc.setColor(Color.black);
		centerString(gc, fm, maze.getPercentDone()+"% completed", 200);
		centerString(gc, fm, "Hit escape to stop", 300);
	}
	
	private void centerString(Graphics g, FontMetrics fm, String str, int ypos) {
		g.drawString(str, (Constants.VIEW_WIDTH-fm.stringWidth(str))/2, ypos);
	}

	Font largeBannerFont = new Font("TimesRoman", Font.BOLD, 48);
	Font midBannerFont = new Font("TimesRoman", Font.BOLD, 16);
	Font smallBannerFont = new Font("TimesRoman", Font.BOLD, 16);

}
