package edu.wm.cs.cs301.londynsmith.amazebylondynsmith.falstad;

import android.os.Handler;
import android.os.Message;
import edu.wm.cs.cs301.londynsmith.amazebylondynsmith.falstad.Robot.Direction;
import edu.wm.cs.cs301.londynsmith.amazebylondynsmith.falstad.Robot.Turn;

public class WallFollower extends ManualDriver {
	
	private static Robot robot;
	private int pathLength = 0;	
	static Handler handle = new Handler(){
		@Override
		public void handleMessage(Message msg){
			if(msg.what == 0){
				((BasicRobot) robot).maze.notifyViewerRedraw();
				((BasicRobot) robot).maze.getPlayActivity().update();
			}
		}
	};
	Thread work = new Thread(){
		public void run(){
			((BasicRobot) robot).maze.mapMode = true;
			((BasicRobot) robot).maze.showSolution = true;
			((BasicRobot) robot).maze.showMaze = !((BasicRobot) robot).maze.showMaze;
//			((BasicRobot) robot).maze.notifyViewerRedraw();
			try{
				Thread.sleep(25);
				handle.sendEmptyMessage(0);
			}
			catch(Exception e) {}
			
			while ((robot.getBatteryLevel() > 0)){
				try{
				if (robot.canSeeGoal(Direction.LEFT) || robot.canSeeGoal(Direction.FORWARD)
						|| robot.canSeeGoal(Direction.RIGHT)){
					if (robot.canSeeGoal(Direction.LEFT)){
						if(robot.getBatteryLevel() > 5){
							robot.rotate(Turn.RIGHT);
							((BasicRobot)robot).maze.state = Constants.STATE_FINISH;
//							((BasicRobot)robot).maze.notifyViewerRedraw();
							handle.sendEmptyMessage(0);
							pathLength = 0;
							try {
								((BasicRobot) robot).maze.robotDriver.drive2Exit();
							} catch (Exception e) {
								// TODO Auto-generated catch block
								e.printStackTrace();
							}
						}

					}
					else if (robot.canSeeGoal(Direction.RIGHT)){
						if(robot.getBatteryLevel() > 5){
							robot.rotate(Turn.LEFT);
							((BasicRobot)robot).maze.state = Constants.STATE_FINISH;
//							((BasicRobot)robot).maze.notifyViewerRedraw();
							try{
								Thread.sleep(25);
								handle.sendEmptyMessage(0);
							}
							catch(Exception e) {}
							pathLength = 0;
							try {
								((BasicRobot) robot).maze.robotDriver.drive2Exit();
							} catch (Exception e) {
								// TODO Auto-generated catch block
								e.printStackTrace();
							}
						}
					}
					else if(robot.canSeeGoal(Direction.FORWARD)){
						if(robot.getBatteryLevel() > 5){						
							((BasicRobot)robot).maze.state = Constants.STATE_FINISH;
//							((BasicRobot)robot).maze.notifyViewerRedraw();
							handle.sendEmptyMessage(0);
							pathLength = 0;
							try {
								((BasicRobot) robot).maze.robotDriver.drive2Exit();
							} catch (Exception e) {
								// TODO Auto-generated catch block
								e.printStackTrace();
							}
						}
					}
				}
				}
				catch(Exception e) {}
				try{
				if ((robot.distanceToObstacle(Robot.Direction.FORWARD) == 0) && (robot.distanceToObstacle(Robot.Direction.RIGHT) == 0)){
					if (robot.getBatteryLevel() < 8){
						break;
					}
					Thread.sleep(30);
					robot.rotate(Turn.RIGHT);
					handle.sendEmptyMessage(0);
					robot.move(1);
					handle.sendEmptyMessage(0);
					pathLength += 1;
				}
				
				else if ((robot.distanceToObstacle(Robot.Direction.RIGHT) != 0)){
					if (robot.getBatteryLevel() < 8){
						break;
					}
					Thread.sleep(30);
					robot.rotate(Turn.LEFT);
					handle.sendEmptyMessage(0);
					robot.move(1);
					handle.sendEmptyMessage(0);
					pathLength += 1;
				}
				
				else{
					if (robot.getBatteryLevel() < 5){
						break;
					}
					Thread.sleep(25);
					robot.move(1);
					handle.sendEmptyMessage(0);
					pathLength += 1;

				}
				
				int[] curPosition = robot.getCurrentPosition();
				if (((BasicRobot)robot).maze.isEndPosition(curPosition[0], curPosition[1])){
					((BasicRobot)robot).maze.state = Constants.STATE_FINISH;
//					((BasicRobot)robot).maze.notifyViewerRedraw();
					handle.sendEmptyMessage(0);
					pathLength = 0;
					try {
						((BasicRobot) robot).maze.robotDriver.drive2Exit();
					} catch (Exception e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
				}
				} catch(Exception e) {}
			} 
			robot.setBatteryLevel(0);
			((BasicRobot)robot).maze.state = Constants.STATE_FINISH;
//			((BasicRobot)robot).maze.notifyViewerRedraw();
			handle.sendEmptyMessage(0);
			pathLength = 0;
			try {
				((BasicRobot) robot).maze.robotDriver.drive2Exit();
			} catch (Exception e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
	};
	/**
	 * Constructs the object.
	 */
	public WallFollower(){
		super();
	}
	/**
	 * Sets the robot
	 */
	public void setRobot(Robot robot){
		this.robot = robot;
		((BasicRobot)robot).setDriver(this);
	}
	
	public void start() {
		// TODO Auto-generated method stub
		work.start();
	}
	/**
	 * This just follows the left wall. It has the possibility of hitting the exit or just
	 * hitting the loop forever. Displays the finish if it runs out of battery and/or if it
	 * can see the goal. It also makes sure it has anough battery for all the operations.
	 */
	@Override
	public boolean drive2Exit() throws Exception {
		if(robot.getBatteryLevel() == 0){
			robot.setBatteryLevel(0);
			((BasicRobot)robot).maze.state = Constants.STATE_FINISH;
//			((BasicRobot)robot).maze.notifyViewerRedraw();
			handle.sendEmptyMessage(0);
			((BasicRobot) robot).maze.setCompleted(false);
			return false;
		}
		else{
			((BasicRobot) robot).maze.setCompleted(true);
			return true;
		}
				
	}
	/**
	 * returns energy consumption
	 */
	public float getEnergyConsumption() {
		// TODO Auto-generated method stub
		return robot.getBatteryLevel();
	}
	/**
	 * Returns path length
	 */
	public int getPathLength() {
		// TODO Auto-generated method stub
		return this.pathLength;
	}
	
	@Override
	public void setPathLength(int length){
		((BasicRobot)robot).maze.robotDriver.setPathLength(length);
	}

}
	
