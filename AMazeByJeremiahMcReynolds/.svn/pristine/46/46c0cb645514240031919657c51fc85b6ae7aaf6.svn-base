package edu.wm.cs.cs301.londynsmith.amazebylondynsmith.falstad;


import android.content.Context;
import android.graphics.Bitmap;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.Paint;
import android.graphics.Paint.FontMetrics;
import android.graphics.Point;
import android.util.AttributeSet;
import android.view.View;

public class GraphicsWrapper extends View {
	/// Main object ever used always and forever.
	public Canvas gc;
	Paint image = new Paint();
	Bitmap b;

	//// RedrawTitle Necessities /////
	//Font largeBannerFont = new Font("TimesRoman", Font.BOLD, 48);
	//Font midBannerFont = new Font("TimesRoman", Font.BOLD, 16);
	//Font smallBannerFont = new Font("TimesRoman", Font.BOLD, 16);
	/// Other random necessities ////
	Point p;
	Maze maze;
	Color col;
	
	/**
	 * This is used to make just a very basic graphics wrapper that is only used for
	 * some very generalized object. I.E. if you want to just use it for a point object.
	 */
	public GraphicsWrapper(Context context, AttributeSet attrs){
		super(context, attrs);
		b = Bitmap.createBitmap(50, 50, Bitmap.Config.ARGB_8888);
		gc = new Canvas(b);
		this.onLayout(true, 50, 50, 50, 50);
	}
	@Override
	protected void onDraw(Canvas c){
		this.gc = c;
	}
	
	public void fillRect(int x, int y, int width, int height){
		image.setStyle(Paint.Style.FILL);
		gc.drawRect(x, height + y, width + x, y, image );
	}
	
	public void fillPolygon(){
		
	}
	
	public void fillOval(){
		
	}
	
	/**
	 * Returns the point object
	 * @return
	 */
	public Point getPoint(){
		return p;
	}
	/**
	 * Sets the point object for the class.
	 * @param x
	 * @param y
	 */
	public void setPoint(int x, int y){
		p = new Point(x, y);
	}
	/**
	 * Returns the graphics
	 */
	public Canvas getGraphics(){
		return gc;
	}
	/**
	 * Sets the graphics to gw
	 * @param gw
	 */
	public void setGraphics(Canvas gc) {
		this.gc = gc;
	}
	/**
	 * This asks for 3 ints as color parameters and creates the color object based off of
	 * those 3 ints. 
	 * @param first
	 * @param second
	 * @param third
	 */
	public void setCol(int first, int second, int third){
		image.setColor(Color.rgb(first, second, third));
	}
	/**
	 * Sets the color using only one int this time. Useful for Seg.
	 * @param col
	 */
//	public void setCol(int col){
//		this.col = new Color(col);
//	}
	/**
	 * Sets the graphics color based on what the name of the color they want it is. 
	 * Note: doesn't account for all possible colors, only the ones that are necessary
	 * @param nm
	 */
	public void setGraphicsColor(String nm){
		if(nm.equals("red"))
			gc.drawColor(Color.RED);
		
		if(nm.equals("gray"))
			gc.drawColor(Color.GRAY);
		
		if(nm.equals("yellow"))
			gc.drawColor(Color.YELLOW);
		
		if(nm.equals("white"))
			gc.drawColor(Color.WHITE);
		
		if(nm.equals("black"))
			gc.drawColor(Color.BLACK);
		
		if(nm.equals("blue"))
			gc.drawColor(Color.BLUE);
		
		if(nm.equals("orange"))
			gc.drawColor(Color.MAGENTA);
		
		if(nm.equals("darkGray"))
			gc.drawColor(Color.DKGRAY);
		
	}
	/**
	 * Returns the color object.
	 * @return
	 */
	public Color getColor(){
		return col;
	}
	
	/**
	 * Sets Fonts size based off what final integer/font objects already exist in this
	 * class (used to be in MapDrawer class). 
	 * @param nm
	 */
//	public void setGraphicsFont(String nm){
//		if(nm.equals("large"))
//			gc.setFont(largeBannerFont);
			
//		if(nm.equals("mid"))
//			gc.setFont(midBannerFont);
		
//		if(nm.equals("small"))
//			gc.setFont(smallBannerFont);
//	}
	
	/**
	 * Used to center the given string on the graphics object. The ypos is where it is to
	 * be placed.
	 * @param fm
	 * @param str
	 * @param ypos
	 */
//	public void centerString(FontMetrics fm, String str, int ypos){
//		gc.drawString(str, (Constants.VIEW_WIDTH-((Object) fm).stringWidth(str))/2, ypos);
//	}
	
	/**
	 * Returns the font metrics of the graphics object.
	 * @return
	 */
//	public FontMetrics getFontMetics(){
//		FontMetrics fm = getFontMetrics();
//		return fm;
//	}
}
